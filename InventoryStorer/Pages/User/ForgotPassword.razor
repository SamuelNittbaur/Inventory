@page "/ForgotPassword"
@inject NavigationManager navManager
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Horizontal" Style="margin-top:10vh;" JustifyContent="JustifyContent.Center">
    <RadzenCard Style="width:30vw; margin-top:20vh; min-width:350px;" class="rz-shadow-6">
        <RadzenStack Gap="2vh">
            <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-text-tertiary-color);">Forgot Password</RadzenText>
            <div style="display:flex; flex-direction:column; gap:inherit.5vh;">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Username</RadzenText>
                <RadzenTextBox Disabled="isLoading" Placeholder="UserName" @bind-Value="request.userName" Style="width: 100%" aria-label="Username Textbox" />
            </div>
            <RadzenButton class="rz-ripple" style="width:100%;" Disabled="isLoading" ButtonStyle="ButtonStyle.Success" Icon="done" Click="ForgotPasswortFunc" />
            <a href="/Login">
                <RadzenButton class="rz-ripple" style="width:100%;" Variant="Variant.Outlined" Disabled="isLoading" ButtonStyle="ButtonStyle.Base" Text="Back" />
            </a>
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    /// <summary>
    /// Indicates whether a loading process is currently active.
    /// </summary>
    private bool isLoading = false;

    /// <summary>
    /// A general request object used for various operations.
    /// </summary>
    GeneralRequest request = new GeneralRequest();

    /// <summary>
    /// Handles the logic for initiating a password recovery email.
    /// </summary>
    private async void ForgotPasswortFunc()
    {
        isLoading = true;
        StateHasChanged();

        var response = await Logic.UserLogic.UserLogic.SendPasswordEmail(request);
        if (response)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Please Check your Emails",
                    Duration = 4000,
                    CloseOnClick = true,
                    Payload = DateTime.Now
                });
            isLoading = false;
            StateHasChanged();
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Something went wrong. Please contact info@sn-dev.de",
                    Duration = 4000,
                    CloseOnClick = true,
                    Payload = DateTime.Now
                });
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Displays a notification message to the user.
    /// </summary>
    /// <param name="message">The notification message to display.</param>
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}