@page "/change-password/{id}/{userName}"
@inject IJSRuntime jsRuntime
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
    <RadzenCard Style="width:30vw; margin-top:20vh; min-width:350px;" class="rz-shadow-6">
        <RadzenStack Gap="2vh">
            <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-text-tertiary-color);">Reset Password</RadzenText>
            <div style="display:flex; flex-direction:column; gap:inherit.5vh;">
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password</RadzenText>
                <RadzenPassword @bind-Value="request.password" Disabled="isLoading" Style="width: 100%" aria-label="Username Textbox" />
            </div>
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled="isLoading" Click="ChangePasswordFunc"></RadzenButton>
            <a href="/Login">
                <RadzenButton style="width:100%;" class="rz-ripple" Disabled="isLoading" ButtonStyle="ButtonStyle.Base">To Login</RadzenButton>
            </a>
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

@code {
    /**
      * Represents the Reset Password component.
      */

    /**
     * Gets or sets the user ID parameter passed to the component.
     * This value is used to identify the user whose password needs to be reset.
     */
    [Parameter]
    public string id { get; set; } = String.Empty;

    /**
     * Gets or sets the username parameter passed to the component.
     * This value is used in the reset password request to specify the user.
     */
    [Parameter]
    public string userName { get; set; } = String.Empty;

    /**
     * Indicates whether the reset password process is currently loading.
     */
    private bool isLoading = false;

    /**
     * Represents the reset password request containing the user's ID and username.
     */
    private ResetPasswordRequest request = new ResetPasswordRequest();

    /**
     * Initiates the password change process by sending a reset password request.
     * Displays a notification message based on the result of the operation.
     */
    private async void ChangePasswordFunc()
    {
        isLoading = true;
        StateHasChanged();
        request.userName = userName;
        request.userId = Guid.Parse(id);
        var response = await Logic.UserLogic.UserLogic.ResetPassword(request);
        if (response)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "You can login",
                    Duration = 4000,
                    CloseOnClick = true,
                    Payload = DateTime.Now
                });
            isLoading = false;
            StateHasChanged();
            Navigation.NavigateTo("/Login");
        }
        else
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Something went wrong. Please contact info@sn-dev.de",
                    Duration = 4000,
                    CloseOnClick = true,
                    Payload = DateTime.Now
                });
            isLoading = false;
            StateHasChanged();
        }
    }

    /**
     * Displays a notification message to the user.
     *
     * @param message The notification message to be displayed.
     */
    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}